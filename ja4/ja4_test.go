package ja4

import (
	"encoding/hex"
	"testing"
)

func hexToBytes(t *testing.T, hexClientHello string) []byte {
	t.Helper()
	clientHello, err := hex.DecodeString(hexClientHello)
	if err != nil {
		t.Fatal(err)
	}
	return clientHello
}

func assertJA4(t *testing.T, hexClientHello string, expectedJA4 string) {
	t.Helper()
	fp := JA4Fingerprint{}
	err := fp.UnmarshalBytes(hexToBytes(t, hexClientHello), 't')
	if err != nil {
		t.Fatal(err)
	}

	str := fp.String()
	if str != expectedJA4 {
		t.Fatalf("expected %s, actual %s", expectedJA4, str)
	}
}

func TestPresharedKeyExtension(t *testing.T) {
	assertJA4(
		t,
		"160301020b0100020703037f020a187f3aa7329f24155b77abff130dd616e200f6ef7d6c2d4657bf48218a20d945e74ab5e723901b3948e36cd39e248009489982497543815cdd74c3da32620076130213031301c02fc02bc030c02c009ec0270067c028006b00a3009fcca9cca8ccaac0afc0adc0a3c09fc05dc061c057c05300a2c0aec0acc0a2c09ec05cc060c056c052c024006ac0230040c00ac01400390038c009c01300330032009dc0a1c09dc051009cc0a0c09cc050003d003c0035002f00ff010001480000001b0019000016736869627579612e6170692e7375627363616e2e696f000b000403000102000a000c000a001d0017001e00190018002300000016000000170000000d0030002e040305030603080708080809080a080b080408050806040105010601030302030301020103020202040205020602002b00050403040303002d00020101003300260024001d00207289331a6f55556a98dfe0c96d52fc31d897644a5f87c3d71506b98fc198602300290094006f0069eb56145bbba79db5b290bd16a6133dea5d88e79857b13f7ac21c07962ca58afc84c0f1e8f29205c345c5eeeb67237ace5f6838feadfd2acadc5e464ddf7c9b3a9560d9dd6a8f030c452d6ea621b45e5c07e899184648adcc8a5d898ff6dc6050627de2070b9cd0efcea059033500212061b4238d30f5cda4b6559bd1061936b2912bd69a8b49610246db2d7bbae4b73c",
		"t13d591100_a33745022dd6_a11995863d32",
	)
}

/*
curl 8.6.0 (aarch64-apple-darwin23.2.0) libcurl/8.6.0 (SecureTransport) OpenSSL/3.2.1 zlib/1.2.12 brotli/1.1.0 zstd/1.5.5 libidn2/2.3.7 libssh2/1.11.0 nghttp2/1.60.0 librtmp/2.3 OpenLDAP/2.6.7
Release-Date: 2024-01-31
Protocols: dict file ftp ftps gopher gophers http https imap imaps ipfs ipns ldap ldaps mqtt pop3 pop3s rtmp rtsp scp sftp smb smbs smtp smtps telnet tftp
Features: alt-svc AsynchDNS brotli GSS-API HSTS HTTP2 HTTPS-proxy IDN IPv6 Kerberos Largefile libz MultiSSL NTLM SPNEGO SSL threadsafe TLS-SRP UnixSockets zstd
*/
func TestMacCurl860(t *testing.T) {
	assertJA4(
		t,
		"1603010200010001fc030345b0e945658446fb98136c30e1be82ed4bd81e16d332b9f3317a553fcb88e4262032776135cd2a213dcd935ee9f471768d714d8a9e3292102e1a2e840f52644b0100204a4a130113021303c02bc02fc02cc030cca9cca8c013c014009c009d002f0035010001934a4a00000000001900170000146c707461672e6c697665706572736f6e2e6e65740033002b00291a1a000100001d0020a0a1a353c499704a9b56af77f3f87cfdd287e33009eda54f9ab9b43fb2f595630010000e000c02683208687474702f312e3100170000ff0100010000120000002b000706dada03040303000d0012001004030804040105030805050108060601000a000a00081a1a001d00170018002d0002010100050005010000000000230000000b00020100446900050003026832001b0003020002eaea000100001500c3000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
		"t13d1516h2_8daaf6152771_e5627efa2ab1",
	)
}

var (
	benchmarkClientHello             = []byte{22, 3, 1, 2, 0, 1, 0, 1, 252, 3, 3, 69, 176, 233, 69, 101, 132, 70, 251, 152, 19, 108, 48, 225, 190, 130, 237, 75, 216, 30, 22, 211, 50, 185, 243, 49, 122, 85, 63, 203, 136, 228, 38, 32, 50, 119, 97, 53, 205, 42, 33, 61, 205, 147, 94, 233, 244, 113, 118, 141, 113, 77, 138, 158, 50, 146, 16, 46, 26, 46, 132, 15, 82, 100, 75, 1, 0, 32, 74, 74, 19, 1, 19, 2, 19, 3, 192, 43, 192, 47, 192, 44, 192, 48, 204, 169, 204, 168, 192, 19, 192, 20, 0, 156, 0, 157, 0, 47, 0, 53, 1, 0, 1, 147, 74, 74, 0, 0, 0, 0, 0, 25, 0, 23, 0, 0, 20, 108, 112, 116, 97, 103, 46, 108, 105, 118, 101, 112, 101, 114, 115, 111, 110, 46, 110, 101, 116, 0, 51, 0, 43, 0, 41, 26, 26, 0, 1, 0, 0, 29, 0, 32, 160, 161, 163, 83, 196, 153, 112, 74, 155, 86, 175, 119, 243, 248, 124, 253, 210, 135, 227, 48, 9, 237, 165, 79, 154, 185, 180, 63, 178, 245, 149, 99, 0, 16, 0, 14, 0, 12, 2, 104, 50, 8, 104, 116, 116, 112, 47, 49, 46, 49, 0, 23, 0, 0, 255, 1, 0, 1, 0, 0, 18, 0, 0, 0, 43, 0, 7, 6, 218, 218, 3, 4, 3, 3, 0, 13, 0, 18, 0, 16, 4, 3, 8, 4, 4, 1, 5, 3, 8, 5, 5, 1, 8, 6, 6, 1, 0, 10, 0, 10, 0, 8, 26, 26, 0, 29, 0, 23, 0, 24, 0, 45, 0, 2, 1, 1, 0, 5, 0, 5, 1, 0, 0, 0, 0, 0, 35, 0, 0, 0, 11, 0, 2, 1, 0, 68, 105, 0, 5, 0, 3, 2, 104, 50, 0, 27, 0, 3, 2, 0, 2, 234, 234, 0, 1, 0, 0, 21, 0, 195, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
	thisPreventsCompilerOptimization string
)

func BenchmarkJA4(b *testing.B) {
	for n := 0; n < b.N; n++ {
		fp := JA4Fingerprint{}
		err := fp.UnmarshalBytes(benchmarkClientHello, 't')
		if err != nil {
			b.Fatal(err)
		}
		thisPreventsCompilerOptimization = fp.String()
	}
}
